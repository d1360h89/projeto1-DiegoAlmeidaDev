Claro! Vou te mostrar alguns dos comandos principais do Git e como visualizar o hist√≥rico de commits. üòä

1. **Visualizando o hist√≥rico de commits:**

Git reflog
   Depois de criar v√°rios commits ou clonar um reposit√≥rio com hist√≥rico pr√©-existente, voc√™ provavelmente vai querer olhar para tr√°s e ver o que aconteceu. A ferramenta mais b√°sica e poderosa para isso √© o comando `git log`. Por padr√£o, ele lista os commits em ordem cronol√≥gica inversa (o mais recente primeiro). Cada commit exibe seu checksum SHA-1, nome e email do autor, data de inser√ß√£o e mensagem do commit. Veja um exemplo:

   ```
   $ git log
   commit ca82a6dff817ec66f44342007202690a93763949
   Author: Scott Chacon <schacon@gee-mail.com>
   Date: Mon Mar 17 21:52:11 2008 -0700
   changed the version number

   commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
   Author: Scott Chacon <schacon@gee-mail.com>
   Date: Sat Mar 15 16:40:33 2008 -0700
   removed unnecessary test
   ```

   Voc√™ pode usar op√ß√µes adicionais para personalizar a sa√≠da, como `-p` para mostrar as diferen√ßas introduzidas em cada commit ou `-2` para listar apenas os dois √∫ltimos commits.

2. **Outros comandos essenciais:**
   - `git reset`: Reverte para um estado anterior do reposit√≥rio.
   - `git tag`: Cria uma marca permanente no hist√≥rico.
   - `git rebase`: Reordena os commits no hist√≥rico.


